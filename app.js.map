{"version":3,"sources":["node_modules/loglevel/lib/loglevel.js","index.js"],"names":["require","register","exports","req","module","__makeRequire","n","replace","root","definition","define","amd","log","this","realMethod","methodName","console","undefinedType","undefined","bindMethod","noop","obj","method","bind","Function","prototype","call","e","apply","arguments","enableLoggingWhenConsoleArrives","level","loggerName","replaceLoggingMethods","i","logMethods","length","methodFactory","defaultMethodFactory","Logger","name","defaultLevel","factory","persistLevelIfPossible","levelNum","levelName","toUpperCase","window","localStorage","storageKey","ignore","document","cookie","encodeURIComponent","getPersistedLevel","storedLevel","location","indexOf","exec","slice","self","levels","currentLevel","TRACE","DEBUG","INFO","WARN","ERROR","SILENT","getLevel","setLevel","persist","setDefaultLevel","enableAll","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","TypeError","logger","_log","noConflict","App","main","info","global"],"mappings":"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","file":"pages/app.js","sourcesContent":["require.register('loglevel', function(exports,req,module){\n    var require = __makeRequire((function(n) { return req(n.replace('./', 'loglevel//lib/')); }), {});\n    (function(exports,require,module) {\n      /*\r\n* loglevel - https://github.com/pimterry/loglevel\r\n*\r\n* Copyright (c) 2013 Tim Perry\r\n* Licensed under the MIT license.\r\n*/\r\n(function (root, definition) {\r\n    \"use strict\";\r\n    if (typeof module === 'object' && module.exports && typeof require === 'function') {\r\n        module.exports = definition();\r\n    } else if (typeof define === 'function' && typeof define.amd === 'object') {\r\n        define(definition);\r\n    } else {\r\n        root.log = definition();\r\n    }\r\n}(this, function () {\r\n    \"use strict\";\r\n    var noop = function() {};\r\n    var undefinedType = \"undefined\";\r\n\r\n    function realMethod(methodName) {\r\n        if (typeof console === undefinedType) {\r\n            return false; // We can't build a real method without a console to log to\r\n        } else if (console[methodName] !== undefined) {\r\n            return bindMethod(console, methodName);\r\n        } else if (console.log !== undefined) {\r\n            return bindMethod(console, 'log');\r\n        } else {\r\n            return noop;\r\n        }\r\n    }\r\n\r\n    function bindMethod(obj, methodName) {\r\n        var method = obj[methodName];\r\n        if (typeof method.bind === 'function') {\r\n            return method.bind(obj);\r\n        } else {\r\n            try {\r\n                return Function.prototype.bind.call(method, obj);\r\n            } catch (e) {\r\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\r\n                return function() {\r\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    // these private functions always need `this` to be set properly\r\n\r\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\r\n        return function () {\r\n            if (typeof console !== undefinedType) {\r\n                replaceLoggingMethods.call(this, level, loggerName);\r\n                this[methodName].apply(this, arguments);\r\n            }\r\n        };\r\n    }\r\n\r\n    function replaceLoggingMethods(level, loggerName) {\r\n        /*jshint validthis:true */\r\n        for (var i = 0; i < logMethods.length; i++) {\r\n            var methodName = logMethods[i];\r\n            this[methodName] = (i < level) ?\r\n                noop :\r\n                this.methodFactory(methodName, level, loggerName);\r\n        }\r\n    }\r\n\r\n    function defaultMethodFactory(methodName, level, loggerName) {\r\n        /*jshint validthis:true */\r\n        return realMethod(methodName) ||\r\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\r\n    }\r\n\r\n    var logMethods = [\r\n        \"trace\",\r\n        \"debug\",\r\n        \"info\",\r\n        \"warn\",\r\n        \"error\"\r\n    ];\r\n\r\n    function Logger(name, defaultLevel, factory) {\r\n      var self = this;\r\n      var currentLevel;\r\n      var storageKey = \"loglevel\";\r\n      if (name) {\r\n        storageKey += \":\" + name;\r\n      }\r\n\r\n      function persistLevelIfPossible(levelNum) {\r\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\r\n\r\n          // Use localStorage if available\r\n          try {\r\n              window.localStorage[storageKey] = levelName;\r\n              return;\r\n          } catch (ignore) {}\r\n\r\n          // Use session cookie as fallback\r\n          try {\r\n              window.document.cookie =\r\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\r\n          } catch (ignore) {}\r\n      }\r\n\r\n      function getPersistedLevel() {\r\n          var storedLevel;\r\n\r\n          try {\r\n              storedLevel = window.localStorage[storageKey];\r\n          } catch (ignore) {}\r\n\r\n          if (typeof storedLevel === undefinedType) {\r\n              try {\r\n                  var cookie = window.document.cookie;\r\n                  var location = cookie.indexOf(\r\n                      encodeURIComponent(storageKey) + \"=\");\r\n                  if (location) {\r\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\r\n                  }\r\n              } catch (ignore) {}\r\n          }\r\n\r\n          // If the stored level is not valid, treat it as if nothing was stored.\r\n          if (self.levels[storedLevel] === undefined) {\r\n              storedLevel = undefined;\r\n          }\r\n\r\n          return storedLevel;\r\n      }\r\n\r\n      /*\r\n       *\r\n       * Public API\r\n       *\r\n       */\r\n\r\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n          \"ERROR\": 4, \"SILENT\": 5};\r\n\r\n      self.methodFactory = factory || defaultMethodFactory;\r\n\r\n      self.getLevel = function () {\r\n          return currentLevel;\r\n      };\r\n\r\n      self.setLevel = function (level, persist) {\r\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\r\n              level = self.levels[level.toUpperCase()];\r\n          }\r\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n              currentLevel = level;\r\n              if (persist !== false) {  // defaults to true\r\n                  persistLevelIfPossible(level);\r\n              }\r\n              replaceLoggingMethods.call(self, level, name);\r\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\r\n                  return \"No console available for logging\";\r\n              }\r\n          } else {\r\n              throw \"log.setLevel() called with invalid level: \" + level;\r\n          }\r\n      };\r\n\r\n      self.setDefaultLevel = function (level) {\r\n          if (!getPersistedLevel()) {\r\n              self.setLevel(level, false);\r\n          }\r\n      };\r\n\r\n      self.enableAll = function(persist) {\r\n          self.setLevel(self.levels.TRACE, persist);\r\n      };\r\n\r\n      self.disableAll = function(persist) {\r\n          self.setLevel(self.levels.SILENT, persist);\r\n      };\r\n\r\n      // Initialize with the right level\r\n      var initialLevel = getPersistedLevel();\r\n      if (initialLevel == null) {\r\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\r\n      }\r\n      self.setLevel(initialLevel, false);\r\n    }\r\n\r\n    /*\r\n     *\r\n     * Package-level API\r\n     *\r\n     */\r\n\r\n    var defaultLogger = new Logger();\r\n\r\n    var _loggersByName = {};\r\n    defaultLogger.getLogger = function getLogger(name) {\r\n        if (typeof name !== \"string\" || name === \"\") {\r\n          throw new TypeError(\"You must supply a name when creating a logger.\");\r\n        }\r\n\r\n        var logger = _loggersByName[name];\r\n        if (!logger) {\r\n          logger = _loggersByName[name] = new Logger(\r\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\r\n        }\r\n        return logger;\r\n    };\r\n\r\n    // Grab the current global log variable in case of overwrite\r\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\r\n    defaultLogger.noConflict = function() {\r\n        if (typeof window !== undefinedType &&\r\n               window.log === defaultLogger) {\r\n            window.log = _log;\r\n        }\r\n\r\n        return defaultLogger;\r\n    };\r\n\r\n    return defaultLogger;\r\n}));\r\n\n    })(exports,require,module);\n  });","\"use strict\";\n\nif (typeof global !== \"undefined\") {\n  global.log = require(\"loglevel\");\n}\n\nmodule.exports = function() {\n\n};\n"]}