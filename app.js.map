{"version":3,"sources":["node_modules/loglevel/lib/loglevel.js","controller.js","index.js","automata.js"],"names":[],"mappingspOA;;AAEA,OAAO,OAAP,GAAiB,iBAAjB;;AAEA,SAAS,iBAAT,GAA8B;;AAE5B,MAAI,YAAY,4BAAZ,CAFwB;AAG5B,MAAI,cAAc,SAAS,cAAT,CAAwB,aAAxB,CAAd,CAHwB;AAI5B,cAAY,gBAAZ,CAA6B,OAA7B,EAAsC,YAAY;AAChD,QAAI,mBAAmB,SAAS,cAAT,CAAwB,SAAxB,CAAnB,CAD4C;AAEhD,QAAI,SAAS,SAAS,eAAT,CAAyB,SAAzB,EAAoC,KAApC,CAAT,CAF4C;AAGhD,QAAI,SAAS,SAAS,eAAT,CAAyB,SAAzB,EAAoC,QAApC,CAAT;;AAH4C,UAKhD,CAAO,YAAP,CAAoB,IAApB,EAA0B,CAA1B,EALgD;AAMhD,WAAO,YAAP,CAAoB,IAApB,EAA0B,CAA1B,EANgD;AAOhD,WAAO,YAAP,CAAoB,GAApB,EAAyB,EAAzB,EAPgD;AAQhD,WAAO,WAAP,CAAmB,MAAnB,EARgD;AAShD,qBAAiB,WAAjB,CAA6B,MAA7B,EATgD;GAAZ,CAAtC,CAJ4B;CAA9B;;;;ACJA;;AAEA,OAAO,OAAP,GAAkB,IAAI,GAAJ,EAAlB;AACA,IAAI,oBAAoB,QAAQ,cAAR,CAApB;;AAEJ,SAAS,GAAT,GAAe;AACb,OAAK,IAAL,GAAY,YAAW;AACrB,QAAI,IAAJ,CAAS,MAAT,EADqB;AAErB,wBAFqB;AAGrB,QAAI,IAAJ,CAAS,QAAQ,QAAR,EAAkB,QAAlB,EAAT,EAHqB;GAAX,CADC;CAAf;;;;ACLA;;AAEA,SAAS,GAAT,CAAa,IAAb,EAAmB;AACjB,OAAK,IAAL,GAAY,IAAZ,CADiB;CAAnB;;AAIA,SAAS,KAAT,CAAe,GAAf,EAAoB;AAClB,OAAK,GAAL,GAAW,GAAX,CADkB;CAApB;;AAIA,SAAS,UAAT,CAAoB,IAApB,EAA0B,MAA1B,EAAkC,EAAlC,EAAsC;AACpC,OAAK,IAAL,GAAY,IAAZ,CADoC;AAEpC,OAAK,MAAL,GAAc,MAAd,CAFoC;AAGpC,OAAK,EAAL,GAAU,EAAV,CAHoC;CAAtC;;AAMA,IAAI,WAAW,CAAE,IAAI,GAAJ,CAAQ,GAAR,CAAF,EAAgB,IAAI,GAAJ,CAAQ,GAAR,CAAhB,CAAX;AACJ,IAAI,SAAS,CAAE,IAAI,KAAJ,CAAU,CAAV,CAAF,EAAgB,IAAI,KAAJ,CAAU,CAAV,CAAhB,CAAT;AACJ,IAAI,WAAW;AACb,oBADa;AAEb,gBAFa;AAGb,QAAM,CAAE,OAAO,CAAP,CAAF,CAAN;AACA,QAAM,CAAE,OAAO,CAAP,CAAF,CAAN;AACA,eAAa,CACX,IAAI,UAAJ,CAAe,OAAO,CAAP,CAAf,EAA0B,SAAS,CAAT,CAA1B,EAAuC,OAAO,CAAP,CAAvC,CADW,EAEX,IAAI,UAAJ,CAAe,OAAO,CAAP,CAAf,EAA0B,SAAS,CAAT,CAA1B,EAAuC,OAAO,CAAP,CAAvC,CAFW,CAAb;CALE;;AAWJ,IAAI,IAAJ,CAAS,QAAT;;AAEA,QAAQ,QAAR,GAAmB;SAAM;CAAN;;;;AD/BnB;;AAEA,IAAI,OAAO,MAAP,KAAkB,WAAlB,EAA+B;AACjC,SAAO,GAAP,GAAa,QAAQ,UAAR,CAAb,CADiC;CAAnC;;AAIA,QAAQ,QAAR,GAAmB,QAAQ,YAAR,EAAsB,QAAtB","file":"pages/app.js","sourcesContent":["require.register('loglevel', function(exports,req,module){\n    var require = __makeRequire((function(n) { return req(n.replace('./', 'loglevel//lib/')); }), {});\n    (function(exports,require,module) {\n      /*\r\n* loglevel - https://github.com/pimterry/loglevel\r\n*\r\n* Copyright (c) 2013 Tim Perry\r\n* Licensed under the MIT license.\r\n*/\r\n(function (root, definition) {\r\n    \"use strict\";\r\n    if (typeof module === 'object' && module.exports && typeof require === 'function') {\r\n        module.exports = definition();\r\n    } else if (typeof define === 'function' && typeof define.amd === 'object') {\r\n        define(definition);\r\n    } else {\r\n        root.log = definition();\r\n    }\r\n}(this, function () {\r\n    \"use strict\";\r\n    var noop = function() {};\r\n    var undefinedType = \"undefined\";\r\n\r\n    function realMethod(methodName) {\r\n        if (typeof console === undefinedType) {\r\n            return false; // We can't build a real method without a console to log to\r\n        } else if (console[methodName] !== undefined) {\r\n            return bindMethod(console, methodName);\r\n        } else if (console.log !== undefined) {\r\n            return bindMethod(console, 'log');\r\n        } else {\r\n            return noop;\r\n        }\r\n    }\r\n\r\n    function bindMethod(obj, methodName) {\r\n        var method = obj[methodName];\r\n        if (typeof method.bind === 'function') {\r\n            return method.bind(obj);\r\n        } else {\r\n            try {\r\n                return Function.prototype.bind.call(method, obj);\r\n            } catch (e) {\r\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\r\n                return function() {\r\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    // these private functions always need `this` to be set properly\r\n\r\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\r\n        return function () {\r\n            if (typeof console !== undefinedType) {\r\n                replaceLoggingMethods.call(this, level, loggerName);\r\n                this[methodName].apply(this, arguments);\r\n            }\r\n        };\r\n    }\r\n\r\n    function replaceLoggingMethods(level, loggerName) {\r\n        /*jshint validthis:true */\r\n        for (var i = 0; i < logMethods.length; i++) {\r\n            var methodName = logMethods[i];\r\n            this[methodName] = (i < level) ?\r\n                noop :\r\n                this.methodFactory(methodName, level, loggerName);\r\n        }\r\n    }\r\n\r\n    function defaultMethodFactory(methodName, level, loggerName) {\r\n        /*jshint validthis:true */\r\n        return realMethod(methodName) ||\r\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\r\n    }\r\n\r\n    var logMethods = [\r\n        \"trace\",\r\n        \"debug\",\r\n        \"info\",\r\n        \"warn\",\r\n        \"error\"\r\n    ];\r\n\r\n    function Logger(name, defaultLevel, factory) {\r\n      var self = this;\r\n      var currentLevel;\r\n      var storageKey = \"loglevel\";\r\n      if (name) {\r\n        storageKey += \":\" + name;\r\n      }\r\n\r\n      function persistLevelIfPossible(levelNum) {\r\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\r\n\r\n          // Use localStorage if available\r\n          try {\r\n              window.localStorage[storageKey] = levelName;\r\n              return;\r\n          } catch (ignore) {}\r\n\r\n          // Use session cookie as fallback\r\n          try {\r\n              window.document.cookie =\r\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\r\n          } catch (ignore) {}\r\n      }\r\n\r\n      function getPersistedLevel() {\r\n          var storedLevel;\r\n\r\n          try {\r\n              storedLevel = window.localStorage[storageKey];\r\n          } catch (ignore) {}\r\n\r\n          if (typeof storedLevel === undefinedType) {\r\n              try {\r\n                  var cookie = window.document.cookie;\r\n                  var location = cookie.indexOf(\r\n                      encodeURIComponent(storageKey) + \"=\");\r\n                  if (location) {\r\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\r\n                  }\r\n              } catch (ignore) {}\r\n          }\r\n\r\n          // If the stored level is not valid, treat it as if nothing was stored.\r\n          if (self.levels[storedLevel] === undefined) {\r\n              storedLevel = undefined;\r\n          }\r\n\r\n          return storedLevel;\r\n      }\r\n\r\n      /*\r\n       *\r\n       * Public API\r\n       *\r\n       */\r\n\r\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n          \"ERROR\": 4, \"SILENT\": 5};\r\n\r\n      self.methodFactory = factory || defaultMethodFactory;\r\n\r\n      self.getLevel = function () {\r\n          return currentLevel;\r\n      };\r\n\r\n      self.setLevel = function (level, persist) {\r\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\r\n              level = self.levels[level.toUpperCase()];\r\n          }\r\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n              currentLevel = level;\r\n              if (persist !== false) {  // defaults to true\r\n                  persistLevelIfPossible(level);\r\n              }\r\n              replaceLoggingMethods.call(self, level, name);\r\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\r\n                  return \"No console available for logging\";\r\n              }\r\n          } else {\r\n              throw \"log.setLevel() called with invalid level: \" + level;\r\n          }\r\n      };\r\n\r\n      self.setDefaultLevel = function (level) {\r\n          if (!getPersistedLevel()) {\r\n              self.setLevel(level, false);\r\n          }\r\n      };\r\n\r\n      self.enableAll = function(persist) {\r\n          self.setLevel(self.levels.TRACE, persist);\r\n      };\r\n\r\n      self.disableAll = function(persist) {\r\n          self.setLevel(self.levels.SILENT, persist);\r\n      };\r\n\r\n      // Initialize with the right level\r\n      var initialLevel = getPersistedLevel();\r\n      if (initialLevel == null) {\r\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\r\n      }\r\n      self.setLevel(initialLevel, false);\r\n    }\r\n\r\n    /*\r\n     *\r\n     * Package-level API\r\n     *\r\n     */\r\n\r\n    var defaultLogger = new Logger();\r\n\r\n    var _loggersByName = {};\r\n    defaultLogger.getLogger = function getLogger(name) {\r\n        if (typeof name !== \"string\" || name === \"\") {\r\n          throw new TypeError(\"You must supply a name when creating a logger.\");\r\n        }\r\n\r\n        var logger = _loggersByName[name];\r\n        if (!logger) {\r\n          logger = _loggersByName[name] = new Logger(\r\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\r\n        }\r\n        return logger;\r\n    };\r\n\r\n    // Grab the current global log variable in case of overwrite\r\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\r\n    defaultLogger.noConflict = function() {\r\n        if (typeof window !== undefinedType &&\r\n               window.log === defaultLogger) {\r\n            window.log = _log;\r\n        }\r\n\r\n        return defaultLogger;\r\n    };\r\n\r\n    return defaultLogger;\r\n}));\r\n\n    })(exports,require,module);\n  });","\"use strict\";\n\nmodule.exports = create_controller;\n\nfunction create_controller () {\n  //SVG namespace\n  var namespace = \"http://www.w3.org/2000/svg\";\n  var bGeneration = document.getElementById(\"bGeneration\");\n  bGeneration.addEventListener(\"click\", function () {\n    var canvas_container = document.getElementById(\"autoimg\"); \n    var canvas = document.createElementNS(namespace, \"svg\");\n    var circle = document.createElementNS(namespace, \"circle\");\n    /* The three followings lines defines a circle of center 0,0 and radius 10*/\n    circle.setAttribute(\"cx\", 0);\n    circle.setAttribute(\"cy\", 0);\n    circle.setAttribute(\"r\", 10);\n    canvas.appendChild(circle);\n    canvas_container.appendChild(canvas);\n  });\n}\n","\"use strict\";\n\nif (typeof global !== \"undefined\") {\n  global.log = require(\"loglevel\");\n}\n\nexports.automata = require(\"./automata\").automata;\n","\"use strict\";\n\nfunction Sym(name) {\n  this.name = name;\n}\n\nfunction State(num) {\n  this.num = num;\n}\n\nfunction Transition(from, symbol, to) {\n  this.from = from;\n  this.symbol = symbol;\n  this.to = to;\n}\n\nlet alphabet = [ new Sym(\"a\"), new Sym(\"b\") ];\nlet states = [ new State(0), new State(1) ];\nlet automata = {\n  alphabet,\n  states,\n  init: [ states[0] ],\n  term: [ states[1] ],\n  transitions: [\n    new Transition(states[0], alphabet[0], states[1]),\n    new Transition(states[1], alphabet[1], states[1])\n  ]\n};\n\nlog.info(automata);\n\nexports.automata = () => automata;\n"]}